Python对文件的读写操作

通常，Python 对文件的操作大致可分为下列三步：

通过open函数打开指定文件，并且获得文件的句柄；
通过上一步的文件句柄，对文件进行读(read)、写(write)操作；
通过文件句柄的close函数关闭文件句柄。
其中，对于open函数，我们至少得知道其前2个参数以及encoding参数的含义（其他参数在生活中使用得并不多，有兴趣的可以查阅相关文档）。

第一个参数是文件路径，这个地方需要注意下使用的是绝对路径还是相对路径；
第二个参数是指明本次操作的模式，常用的可分为“读”、“写”和“读写”3种，分别对应字母r、w和r+(w+)。
如果要对文件进行读操作，即指明模式值为r，那么必须保证该文件路径正确（即文件存在），并且禁止程序对该文件进行写操作；
如果对文件进行写操作，即指明模式值为w，那么 Python 会打开这样一个文件，并且清空里面的内容，如果不存在，则会自动创建，
同时，不允许程序对该文件进行读操作。r+和w+模式虽说既可以进行读操作，又可以进行写操作，但是前者打开后文件内容还在，
后者打开文件的同时清空了里面的数据，所以有关w的操作请慎用！
如果我们想在文件内容末位添加数据，可以指明模式值为a，其他更多参数可以参考下图。
在Python 3 中，程序执行环境采用的是Unicode编码，而网络上还有诸如UTF-8、ASCII和UTF-16等等编码格式，
对于一种编码写入的数据，必须要用同样的编码方式进行解码并读取数据，否则就会出现乱码的情况。一般来说这个参数是可选参数，
我们不必刻意去设置，但是当我们有某种需求，特别是爬虫工作者，这个编码可真的是一个要特别注意的问题。


打开文件后，我们即可通过read和write函数对文件进行读写，read函数是一次性将文件中的所有内容都读取出来。
但如果文件内容一大，这对计算机可是一个不小的负荷，更何况我们往往一次不需要这么多数据。为解决上述问题，
我们可以用readline函数去一行一行地读取文件。读操作还有一个函数readlines，他是将文件所有数据，
按行读取出来形成一个list，效果和read一样，不过这里将其按行顺序处理了。

示例程序：

'''
    假设文件ceshi.txt，内容如下：
    python
    读写文件
    原来可以这样玩
'''
    #获取文件句柄
    f = open("ceshi.txt")
    #一次性读取文件内容
    print(f.read())
    #使用完一定要记得关闭句柄
    f.close()
示例输出:
python
读写文件
原来可以这样玩

写操作的话，主要通过write函数完成，使用与上述read函数的调用类似，这里不再演示。
不过这里可以把需要写的内容，直接作为write函数的参数，传递过去即可。但要注意的是，
用写模式打开文件，会清空文件原有的数据！

Python内置函数sorted的使用

给定一个数组，对其按照某种顺序排序，比如将数字从小到大排序，我们很容易写出一个冒泡排序的代码：

ls1 = [1, 5, 4, 3, 2]
def bubble_sort(ls):
    for i in range(len(ls)-1):
        for j in range(len(ls)-i-1):
            if ls[j] > ls[j+1]:
                ls[j], ls[j+1] = ls[j+1], ls[j]
    return ls
我们知道还有诸如快速排序、堆排序更加快的排序方法，而且书写这么一个排序算法代码量又比较大。
这时候我们可以考虑用 Python 中内置的排序函数——sorted函数，我们只需要提供排序关键字的转换函数即可，
如我们想对Alice、Bob和qwer这四个字符串按长度大小，从小到大排序，可以这么写：

ls = ['Alice', 'Bob', 'qwer']
def func(key):
    return len(key)
print(sorted(ls, key=func))
示例输出:
['Bob', 'qwer', 'Alice']

如果熟悉lambda表达式的话，简单的排序规则将会表现得更加简洁，如上述代码可以表示为sorted(ls, 
key=lambda x:len(x))。有关lambda表达式的更多使用，请有兴趣的同学自行学习。