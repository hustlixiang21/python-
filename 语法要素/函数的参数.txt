Python 的函数参数主要包含以下几种：

必选参数；
默认参数；
可变参数；
关键字参数。
必选参数

必选参数也叫位置参数，是函数中最常用的参数。必选参数就是在调用函数的时候必须指定参数值。例如：

# 定义加法函数plus，参数a,b就是必选参数
def plus(a,b):
   c=a+b
   return(c)
# 调用函数plus时，必须给参数a,b传递值
d=plus(1,2)
# 输出结果d
print(d)
输出结果：

3
如果调用plus函数时，传入的参数不符合要求，则会出现错误。例如：

>>d = plus()
TypeError: plus() missing 2 required positional arguments: 'a' and 'b'
>>d = plus(1)
TypeError: plus() missing 1 required positional argument: 'b'
默认参数

默认参数是指给函数参数提供默认值，如果在调用函数的时候没有给该参数传递值，则该参数使用默认值。例如：

# 定义加法函数plus，参数a是必选参数，参数b是默认值2的参数
def plus(a,b=2):
   c=a+b
   return(c)
# 调用函数plus时，必须给参数a传递值，若不给b传递值，则b默认为2
d=plus(1)
# 输出结果d
print(d)
从上面的例子可以看出，在函数调用过程中可以不用给默认参数传递参数值。但在使用默认参数时，有两点需要注意：

默认参数要放在所有必选参数的后面；
默认参数必须指向不变对象。
可变参数

在有些情况下，我们在定义函数的时候，还不能确定函数应该包含多少个参数，这时我们可以使用可变参数，可变参数就是传入的参数数量是可变的。例如：

# 定义plus函数，完成的功能是返回输入的整数之和。
# 参数numbers是可变参数，表示输入的参数个数可以为任意值
def plus(*numbers):
   add = 0
   for i in numbers:
      add += i
   return(add)
# 调用3次plus函数，每次的参数个数都不相同
d1 = plus(1,2,3)
d2 = plus(1,2,3,4)
d3 = plus(1,3,5,7,9)
# 向函数中可以传递任意参数，包括0个参数
d4 = plus()
# 输出结果
print(d1)
print(d2)
print(d3)
print(d4)
输出结果：

6
10
25
0
在上面的例子中，numbers就是一个可变参数，可变参数前面加一个标识符*。在函数内部，可变参数numbers接收到的值是一个tuple。我们在调用参数是可变参数的函数时，可以给该函数传递任意个数的参数，包括0个参数。

关键字参数

可变参数允许我们在调用函数时传入任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许我们传入任意个含参数名的参数，这些关键字参数在函数调用时自动组装为一个dict。也就是说，关键字参数将长度任意的键-值对，作为参数传递给函数。例如：

# 定义一个包含关键字参数的函数，返回值为参数值
def plus(**kw):
   return kw
# 调用plus函数，参数值为空
d1 = plus()
# 调用plus函数，参数值为x=1
d2 = plus(x=1)
# 调用plus函数，参数值为x=1,y=2
d3 = plus(x=1, y=2)
# 输出d1,d2,d3
print(d1)
print(d2)
print(d3)
输出结果：

{}
{'x': 1}
{'x': 1, 'y': 2}
在上面的例子中，kw就是一个关键字参数，关键字参数前面加**表示。关键字参数可以扩展函数功能，使传递参数过程更为简便。例如：

# 定义一个plus函数，有3个参数，返回值是3个参数之和
def plus(x,y,z):
   return x+y+z
# 有一个dict列表，当中3个键的值分别为1,2,3
dict = {'x':1, 'y':2, 'z':3}
# 将dict列表中的3个值传入plus函数中，得到返回值d
d = plus(dict['x'],dict['y'],dict['z'])
# 输出d
print(d)
输出结果：

6
但在上述例子中，将字典中的值向plus函数中传递参数的方法过于累赘，可以采取关键字参数的方法。例如：

# 定义一个plus函数，有3个参数，返回值是3个参数之和
def plus(x,y,z):
   return x+y+z
# 有一个dict列表，当中3个键的值分别为1,2,3
dict = {'x':1, 'y':2, 'z':3}
# 用关键字参数的方法将dict列表中的3个值传入plus函数中，得到返回值d
d = plus(**dict)
# 输出d
print(d)
输出结果：

6
使用关键字参数**dict的方法，可以大大提高参数传递的效率。

参数组合

我们在函数定义过程中，可以同时用到必选参数、默认参数、可变参数、关键字参数中的一种或几种。但是需要特别注意的是，这四种参数在使用的过程中是有顺序的，顺序依次应该是必选参数、默认参数、可变参数和关键字参数。例如：

# 定义一个包含必选参数、默认参数、可变参数和关键字参数的函数plus
def plus(x, y, z=0, *args, **kw):
   print('x=',x)
   print('y=',y)
   print('z=',z)
   print('args=',args)
   print('kw=',kw)
# 调用函数plus，输入两个参数1,2
plus(1,2)
输出结果：

x= 1
y= 2
z= 0
args= ()
kw= {}
上面这个例子中，向plus函数中传入了两个必选参数1和2。必选参数必须得提供值，但是默认参数、可变参数和关键字参数可以不用提供值，我们还可以给默认参数、可变参数和关键字参数传递值。例如：

# 定义一个包含必选参数、默认参数、可变参数和关键字参数的函数plus
def plus(x, y, z=0, *args, **kw):
   print('x=',x)
   print('y=',y)
   print('z=',z)
   print('args=',args)
   print('kw=',kw)
# 调用函数plus，输入参数x=1,y=2,z=3,args=(4,5,6),kw={}
plus(1,2,3,4,5,6)
print('\n')
# 调用函数plus，输入参数x=1,y=2,z=3,args=(4,5,6),kw={'k':7, 'm':8}
plus(1,2,3,4,5,6,k=7,m=8)
输出结果：

x= 1
y= 2
z= 3
args= (4, 5, 6)
kw= {}
x= 1
y= 2
z= 3
args= (4, 5, 6)
kw= {'k': 7, 'm': 8}
小结

不同类型的参数是有顺序的，依次是必选参数、默认参数、可变参数和关键字参数；
默认参数一定要用不可变对象，用可变对象容易产生逻辑错误；
*args表示的是可变参数，*args接收的是一个元组；
**kw表示的是关键字参数，**kw接收的是一个字典。
